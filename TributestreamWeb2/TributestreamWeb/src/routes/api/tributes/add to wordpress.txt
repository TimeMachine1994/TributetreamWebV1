<?php
/**
 * Plugin Name: A6 Tributestream (Refactored)
 * Description: A refactoring of "Plugin 5" to behave more like "Plugin 4," using a custom database table for tributes and the default wp_usermeta table for user meta data. We use JWT Auth for authentication.
 * Version: 1.2
 * Author: Your Name
 *
 * -------------------------------------------------------------------------
 * :: Overview
 * -------------------------------------------------------------------------
 * This plugin demonstrates how to store tribute data in a custom database table
 * called 'wp_tributes' (or '{prefix}_tributes'), rather than using a custom
 * post type. It also shows how to store user-specific data in the default
 * WordPress 'wp_usermeta' table, referencing each user by user_id. 
 *
 * As in Plugin 4, we define various REST API endpoints under the 'tributestream/v1'
 * namespace. We also integrate with a JWT-based authentication plugin (which must
 * be installed separately) to protect some routes.
 *
 * Endpoints (all under /wp-json/tributestream/v1/):
 *  1.  POST    /tribute               -> Create a new tribute in our custom table
 *  2.  GET     /tribute/<slug>        -> Retrieve a single tribute record by slug
 *  3.  POST    /user-meta             -> Create or update user meta data in wp_usermeta
 *  4.  GET     /user-meta/<user_id>   -> Retrieve all meta data for a given user
 *  5.  POST    /register              -> Register a new WordPress user (plus user meta)
 *  6.  GET/POST/PUT/DELETE /tributes  -> Full CRUD for tributes in the custom table
 *
 * JWT Auth:
 *  - We expect a Bearer token in the Authorization header for authenticated
 *    routes. The token is validated via /jwt-auth/v1/token/validate.
 *
 * NOTE: If you want to automatically create the custom table on plugin activation,
 * you can add a register_activation_hook() that calls dbDelta. This code is
 * omitted for brevity but can be added as needed.
 */

// -------------------------------------------------------------------------
// :: Global wpdb object
// -------------------------------------------------------------------------
global $wpdb;

/*
 * -------------------------------------------------------------------------
 * :: Register Our Custom REST API Endpoints
 * -------------------------------------------------------------------------
 * We'll attach everything to the `rest_api_init` hook. Each route is under
 * the 'tributestream/v1' namespace. Some routes require JWT authentication,
 * which we verify in 'verify_jwt_cookie' or 'custom_jwt_authenticate'.
 * -------------------------------------------------------------------------
 */

add_action('rest_api_init', function () {
    $namespace = 'tributestream/v1';
    
    // ---------------------------------------------------------------------
    // GET /tributestream/v1/getRole?id=XXXX
    // ---------------------------------------------------------------------
    register_rest_route(
        $namespace,
        '/getRole',
        array(
            'methods'  => 'GET',
            'callback' => 'get_user_roles_endpoint',
            'args'     => array(
                'id' => array(
                    'required' => true,
                    'type'     => 'integer',
                    'description' => 'The ID of the user whose roles should be fetched.'
                ),
            ),
            'permission_callback' => function () {
                // For public access, simply return true.
                return true;
            },
        )
    );

    // ---------------------------------------------------------------------
    // GET /tributestream/v1/tributes
    // Returns a paginated list of tributes
    // ---------------------------------------------------------------------
    register_rest_route($namespace, '/tributes', [
        'methods'  => 'GET',
        'callback' => 'get_all_tributes',
        'permission_callback' => '__return_true', // Allow public access
    ]);

    // ---------------------------------------------------------------------
    // POST /tributestream/v1/tributes
    // Creates a new tribute
    // ---------------------------------------------------------------------
    register_rest_route($namespace, '/tributes', [
        'methods' => 'POST',
        'callback' => 'create_tribute',
        'permission_callback' => '__return_true',
        'args' => [
            'user_id' => ['required' => true, 'type' => 'integer'],
            'loved_one_name' => ['required' => true, 'type' => 'string'],
            'slug' => ['required' => true, 'type' => 'string'],
            'custom_html' => ['required' => false, 'type' => 'string'],
            'phone_number' => ['required' => true, 'type' => 'string'],
            'number_of_streams' => ['required' => false, 'type' => 'integer'],
        ],
    ]);

    // ---------------------------------------------------------------------
    // GET /tributestream/v1/tributes/<id>
    // Retrieves a tribute by ID
    // ---------------------------------------------------------------------
    register_rest_route($namespace, '/tributes/(?P<id>\d+)', [
        'methods' => 'GET',
        'callback' => 'read_tribute',
        'permission_callback' => '__return_true',
    ]);

    // ---------------------------------------------------------------------
    // PUT /tributestream/v1/tributes/<id>
    // Updates a tribute by ID
    // ---------------------------------------------------------------------
    register_rest_route($namespace, '/tributes/(?P<id>\d+)', [
        'methods' => 'PUT',
        'callback' => 'update_tribute',
        'permission_callback' => '__return_true',
        'args' => [
            'loved_one_name' => ['required' => false, 'type' => 'string'],
            'slug' => ['required' => false, 'type' => 'string'],
            'custom_html' => ['required' => false, 'type' => 'string'],
            'phone_number' => ['required' => false, 'type' => 'string'],
            'number_of_streams' => ['required' => false, 'type' => 'integer'],
        ],
    ]);

    // ---------------------------------------------------------------------
    // DELETE /tributestream/v1/tributes/<id>
    // Deletes a tribute by ID
    // ---------------------------------------------------------------------
    register_rest_route($namespace, '/tributes/(?P<id>\d+)', [
        'methods' => 'DELETE',
        'callback' => 'delete_tribute',
        'permission_callback' => '__return_true',
    ]);

    // ---------------------------------------------------------------------
    // POST /tributestream/v1/tribute
    // Creates a new tribute in {prefix}_tributes (JWT-protected).
    // ---------------------------------------------------------------------
    register_rest_route(
        'tributestream/v1',
        '/tribute',
        [
            'methods'             => 'POST',
            'callback'            => 'handle_tributes_entry',
            'permission_callback' => 'verify_jwt_cookie', // requires JWT
        ]
    );

    // ---------------------------------------------------------------------
    // GET /tributestream/v1/tribute/<slug>
    // Retrieves a single tribute by slug (public)
    // ---------------------------------------------------------------------
    register_rest_route(
        'tributestream/v1',
        '/tribute/(?P<slug>[a-zA-Z0-9-_]+)',
        [
            'methods'             => 'GET',
            'callback'            => 'get_tribute_by_slug',
            'permission_callback' => '__return_true', // no auth required
        ]
    );

    // ---------------------------------------------------------------------
    // POST /tributestream/v1/user-meta
    // Updates/creates user meta (JWT-protected).
    // ---------------------------------------------------------------------
    register_rest_route(
        'tributestream/v1',
        '/user-meta',
        [
            [
                'methods'             => WP_REST_Server::CREATABLE, // 'POST'
                'callback'            => 'ts_store_user_meta',
                'permission_callback' => 'custom_jwt_authenticate',
                'args'                => [
                    'meta_key'   => [
                        'required'          => true,
                        'sanitize_callback' => 'sanitize_text_field',
                    ],
                    'meta_value' => [
                        'required'          => true,
                        'sanitize_callback' => 'sanitize_text_field',
                    ],
                ],
            ],
        ]
    );

    // ---------------------------------------------------------------------
    // GET /tributestream/v1/user-meta/<user_id>
    // Retrieves all meta for a user (JWT-protected).
    // ---------------------------------------------------------------------
    register_rest_route(
        'tributestream/v1',
        '/user-meta/(?P<user_id>\d+)',
        [
            [
                'methods'             => WP_REST_Server::READABLE, // 'GET'
                'callback'            => 'ts_get_all_user_meta',
                'permission_callback' => 'custom_jwt_authenticate',
                'args'                => [
                    'user_id' => [
                        'required'          => true,
                        'validate_callback' => function ($param) {
                            return is_numeric($param);
                        },
                    ],
                ],
            ],
        ]
    );

    // ---------------------------------------------------------------------
    // POST /tributestream/v1/register
    // Creates a new WP user, sets meta, sends welcome email (public).
    // ---------------------------------------------------------------------
    register_rest_route(
        'tributestream/v1',
        '/register',
        [
            'methods'             => 'POST',
            'callback'            => 'handle_tributestream_registration',
            'permission_callback' => '__return_true',
        ]
    );
});


/**
 * get_user_roles_endpoint (GET /tributestream/v1/getRole?id=XXX)
 *
 * @param WP_REST_Request $request
 * @return array|WP_Error
 */
function get_user_roles_endpoint( WP_REST_Request $request ) {
    // Extract the "id" parameter
    $user_id = $request->get_param('id');
    
    // Attempt to get the user by the provided ID
    $user_data = get_userdata($user_id);
    
    // If no user data found, return a WordPress error
    if (!$user_data) {
        return new WP_Error(
            'user_not_found',
            'No user found for the specified ID.',
            array('status' => 404)
        );
    }
    
    // Return the user roles in an array
    return array(
        'user_id' => $user_id,
        'roles'   => $user_data->roles,
    );
}


/**
 * get_paginated_tributes
 * (Looks like an older function you might be testing but not actually bound
 *  to a route in the snippet. You could remove or adapt it.)
 */
function get_paginated_tributes($request)
{
    global $wpdb;
    $table_name = $wpdb->prefix . 'tributes';

    $page = $request->get_param('page');
    $per_page = $request->get_param('per_page');
    $search = $request->get_param('search');

    $offset = ($page - 1) * $per_page;

    $query = "SELECT * FROM $table_name WHERE 1=1";

    if (!empty($search)) {
        $query .= $wpdb->prepare(" AND loved_one_name LIKE %s", '%' . $wpdb->esc_like($search) . '%');
    }

    $query .= $wpdb->prepare(" LIMIT %d OFFSET %d", $per_page, $offset);

    $results = $wpdb->get_results($query, ARRAY_A);

    if ($results === false) {
        return new WP_Error(
            'db_query_failed',
            'An error occurred while querying the database.',
            ['status' => 500]
        );
    }

    return new WP_REST_Response($results, 200);
}


/*
 * -------------------------------------------------------------------------
 * :: JWT Authentication Callbacks
 * -------------------------------------------------------------------------
 * verify_jwt_cookie and custom_jwt_authenticate check the Authorization header
 * for 'Bearer <token>' and validate it using /jwt-auth/v1/token/validate.
 * -------------------------------------------------------------------------
 */

/**
 * verify_jwt_cookie
 *
 * @param WP_REST_Request $request
 * @return bool|WP_Error
 */
function verify_jwt_cookie($request)
{
    error_log('Attempting JWT authentication');

    $auth_header = $request->get_header('Authorization');
    if (!$auth_header || strpos($auth_header, 'Bearer') === false) {
        error_log('JWT Auth: No valid Authorization header found');
        return new WP_Error(
            'jwt_auth_no_auth_header',
            'Authorization header not found or invalid.',
            ['status' => 403]
        );
    }

    // Extract the token
    $token = trim(str_replace('Bearer', '', $auth_header));
    error_log('JWT Auth: Attempting to validate token: ' . substr($token, 0, 10) . '...');

    // Validate token with WP's internal route
    $validate_request = new WP_REST_Request('POST', '/jwt-auth/v1/token/validate');
    $validate_request->set_header('Authorization', 'Bearer ' . $token);
    $response = rest_do_request($validate_request);

    if (is_wp_error($response)) {
        error_log('JWT Auth: WP_Error in validation response: ' . $response->get_error_message());
        return new WP_Error(
            'jwt_auth_invalid_token',
            'Token validation failed: ' . $response->get_error_message(),
            ['status' => 403]
        );
    }

    if ($response->get_status() !== 200) {
        $body          = $response->get_data();
        $error_message = isset($body['message']) ? $body['message'] : 'Unknown error';
        error_log('JWT Auth: Non-200 status. Status: ' . $response->get_status() . ', Message: ' . $error_message);
        return new WP_Error(
            'jwt_auth_invalid_token',
            'Token validation failed: ' . $error_message,
            ['status' => 403]
        );
    }

    error_log('JWT Auth: Token validated successfully');
    return true;
}

/**
 * custom_jwt_authenticate
 *
 * Same logic as verify_jwt_cookie, but used on different endpoints.
 *
 * @param WP_REST_Request $request
 * @return bool|WP_Error
 */
function custom_jwt_authenticate($request)
{
    error_log('Attempting JWT authentication (custom callback)');

    $auth_header = $request->get_header('Authorization');
    if (!$auth_header || strpos($auth_header, 'Bearer') === false) {
        return new WP_Error(
            'jwt_auth_no_auth_header',
            'Authorization header not found or invalid.',
            ['status' => 403]
        );
    }

    $token = trim(str_replace('Bearer', '', $auth_header));
    $validate_request = new WP_REST_Request('POST', '/jwt-auth/v1/token/validate');
    $validate_request->set_header('Authorization', 'Bearer ' . $token);

    $response = rest_do_request($validate_request);
    if (is_wp_error($response)) {
        return new WP_Error(
            'jwt_auth_invalid_token',
            'Token validation failed: ' . $response->get_error_message(),
            ['status' => 403]
        );
    }
    if ($response->get_status() !== 200) {
        $body          = $response->get_data();
        $error_message = isset($body['message']) ? $body['message'] : 'Unknown error';
        return new WP_Error(
            'jwt_auth_invalid_token',
            'Token validation failed: ' . $error_message,
            ['status' => 403]
        );
    }

    return true;
}

/*
 * -------------------------------------------------------------------------
 * :: Tribute Endpoints (Custom Table)
 * -------------------------------------------------------------------------
 * We store tributes in a custom table called '{prefix}_tributes'. That table
 * might have columns like: id, user_id, loved_one_name, slug, custom_html,
 * phone_number, number_of_streams, created_at, updated_at, etc.
 * -------------------------------------------------------------------------
 */

/**
 * handle_tributes_entry (POST /tributestream/v1/tribute)
 *
 * Inserts a new row in {prefix}_tributes.
 * Expects JSON with user_id, loved_one_name, slug, etc.
 * Requires JWT auth.
 */
function handle_tributes_entry($request)
{
    global $wpdb;
    $table_name = $wpdb->prefix . 'tributes';

    // Retrieve POSTed JSON params
    $params = $request->get_json_params();
    error_log('Received tribute payload: ' . json_encode($params));

    $data = [
        'user_id'        => isset($params['user_id'])        ? intval($params['user_id']) : null,
        'loved_one_name' => isset($params['loved_one_name']) ? sanitize_text_field($params['loved_one_name']) : null,
        'slug'           => isset($params['slug'])           ? sanitize_title($params['slug']) : null,
        'created_at'     => current_time('mysql', 1),
        'updated_at'     => current_time('mysql', 1),
    ];

    // Remove nulls so as not to insert them incorrectly
    $data = array_filter($data, function ($v) {
        return !is_null($v);
    });

    // Basic validation
    if (
        empty($data['user_id']) ||
        empty($data['loved_one_name']) ||
        empty($data['slug'])
    ) {
        return new WP_Error(
            'missing_fields',
            'Required fields (user_id, loved_one_name, slug) are missing or empty.',
            ['status' => 400]
        );
    }

    // Insert into custom table
    $result = $wpdb->insert($table_name, $data);

    if ($result === false) {
        // Grab the last DB error if any
        $wpdb_error = $wpdb->last_error;
        error_log('Database insert error: ' . $wpdb_error);
        return new WP_Error(
            'db_insert_error',
            'Failed to insert tribute entry: ' . $wpdb_error,
            ['status' => 500]
        );
    }

    // Return the newly created record's ID
    return new WP_REST_Response(
        [
            'message' => 'Tribute created successfully',
            'id'      => $wpdb->insert_id,
        ],
        201
    );
}

/**
 * get_tribute_by_slug (GET /tributestream/v1/tribute/<slug>)
 *
 * Reads a single tribute record by slug.
 * Public route, no auth required.
 */
function get_tribute_by_slug($request)
{
    global $wpdb;
    $table_name = $wpdb->prefix . 'tributes';

    $slug = sanitize_title($request['slug']);
    error_log('Looking up tribute by slug: ' . $slug);

    $query  = $wpdb->prepare("SELECT * FROM $table_name WHERE slug = %s", $slug);
    $result = $wpdb->get_row($query, ARRAY_A);

    if (!$result) {
        return new WP_REST_Response(['message' => 'Tribute not found'], 404);
    }

    return new WP_REST_Response($result, 200);
}

/*
 * -------------------------------------------------------------------------
 * :: User Meta Endpoints
 * -------------------------------------------------------------------------
 * We store user meta data in 'wp_usermeta'. The routes let us insert or
 * retrieve arbitrary key-value pairs for a given user.
 * -------------------------------------------------------------------------
 */

/**
 * ts_store_user_meta (POST /tributestream/v1/user-meta)
 *
 * Creates or updates user meta for a specific user_id. Requires JWT token.
 */
function ts_store_user_meta($request)
{
    $params     = $request->get_json_params();
    $user_id    = isset($params['user_id'])    ? intval($params['user_id']) : 0;
    $meta_key   = isset($params['meta_key'])   ? sanitize_text_field($params['meta_key']) : '';
    $meta_value = isset($params['meta_value']) ? sanitize_text_field($params['meta_value']) : '';

    if (!$user_id || !$meta_key) {
        return new WP_Error(
            'missing_params',
            'user_id and meta_key are required',
            ['status' => 400]
        );
    }

    // Attempt to update or add the meta
    $result = update_user_meta($user_id, $meta_key, $meta_value);
    if (false === $result) {
        return new WP_Error(
            'meta_update_failed',
            'Failed to update user meta data. Please check the data and try again.',
            ['status' => 500]
        );
    }

    return new WP_REST_Response(
        [
            'success'    => true,
            'message'    => 'User meta updated successfully.',
            'user_id'    => $user_id,
            'meta_key'   => $meta_key,
            'meta_value' => $meta_value,
        ],
        200
    );
}

/**
 * ts_get_all_user_meta (GET /tributestream/v1/user-meta/<user_id>)
 *
 * Retrieves all meta keys/values for the specified user.
 * Requires valid JWT token.
 */
function ts_get_all_user_meta($request)
{
    global $wpdb;
    $user_id = $request->get_param('user_id');

    // Confirm that user exists
    if (!get_userdata($user_id)) {
        return new WP_Error(
            'user_not_found',
            'The specified user ID does not exist.',
            ['status' => 404]
        );
    }

    $table_name = $wpdb->usermeta;

    try {
        $query   = $wpdb->prepare("SELECT meta_key, meta_value FROM $table_name WHERE user_id = %d", $user_id);
        $results = $wpdb->get_results($query, ARRAY_A);

        if ($results === false) {
            return new WP_Error(
                'db_query_failed',
                'An error occurred while querying the database.',
                ['status' => 500]
            );
        }

        if (empty($results)) {
            return new WP_Error(
                'no_meta_found',
                'No meta data found for the specified user.',
                ['status' => 404]
            );
        }

        return new WP_REST_Response(
            [
                'success' => true,
                'user_id' => $user_id,
                'meta'    => $results,
            ],
            200
        );
    } catch (Exception $e) {
        return new WP_Error(
            'unexpected_error',
            'An unexpected error occurred: ' . $e->getMessage(),
            ['status' => 500]
        );
    }
}

/*
 * -------------------------------------------------------------------------
 * :: User Registration Endpoint
 * -------------------------------------------------------------------------
 * Public endpoint to create a new WordPress user, set custom meta, etc.
 * -------------------------------------------------------------------------
 */

/**
 * handle_tributestream_registration (POST /tributestream/v1/register)
 *
 * Creates a new WP user with optional meta. Public endpoint.
 */
function handle_tributestream_registration($request)
{
    error_log('Registration attempt started');
    $params = $request->get_json_params();
    error_log('Request data: ' . json_encode($params));

    // Basic required fields
    $username = sanitize_user($params['username']);
    $email    = sanitize_email($params['email']);
    $password = $params['password'] ?? '';

    // Additional custom meta array
    $meta = $params['meta'] ?? [];

    // Create the new user
    $user_id = wp_create_user($username, $password, $email);
    if (is_wp_error($user_id)) {
        return new WP_Error('registration_failed', $user_id->get_error_message(), ['status' => 400]);
    }

    // Optionally add meta fields
    if (!empty($meta)) {
        foreach ($meta as $key => $value) {
            update_user_meta($user_id, sanitize_key($key), sanitize_text_field($value));
        }
    }

    // Send welcome email
    wp_mail(
        $email,
        'Welcome to TributeStream',
        "Your account has been created.\nUsername: $username\nPassword: $password"
    );

    return new WP_REST_Response(['user_id' => $user_id], 201);
}


// -------------------------------------------------------------------------
// :: TRIBUTE CRUD (the simpler set of routes /tributes/...)
// -------------------------------------------------------------------------

/**
 * create_tribute (POST /tributestream/v1/tributes)
 * Insert a new row in the tributes table.
 */
function create_tribute($request) {
    global $wpdb;
    $table = $wpdb->prefix . 'tributes';

    $data = [
        'user_id' => $request['user_id'],
        'loved_one_name' => sanitize_text_field($request['loved_one_name']),
        'slug' => sanitize_title($request['slug']),
        'custom_html' => $request['custom_html'] ?? null,
        'phone_number' => sanitize_text_field($request['phone_number']),
        'number_of_streams' => $request['number_of_streams'] ?? null,
    ];

    $inserted = $wpdb->insert($table, $data);

    if ($inserted) {
        return rest_ensure_response(['success' => true, 'id' => $wpdb->insert_id]);
    }

    return new WP_Error('db_insert_error', 'Failed to insert data', ['status' => 500]);
}

/**
 * read_tribute (GET /tributestream/v1/tributes/<id>)
 * Retrieve a tribute by its numeric ID.
 */
function read_tribute($request) {
    global $wpdb;
    $table = $wpdb->prefix . 'tributes';
    $id = $request['id'];

    $tribute = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE id = %d", $id), ARRAY_A);

    if ($tribute) {
        return rest_ensure_response($tribute);
    }

    return new WP_Error('not_found', 'Tribute not found', ['status' => 404]);
}

/**
 * update_tribute (PUT /tributestream/v1/tributes/<id>)
 * Update the specified columns in a tribute row.
 */
function update_tribute($request) {
    global $wpdb;
    $table = $wpdb->prefix . 'tributes';
    $id = $request['id'];

    $data = array_filter([
        'loved_one_name' => sanitize_text_field($request['loved_one_name']),
        'slug' => sanitize_title($request['slug']),
        'custom_html' => $request['custom_html'],
        'phone_number' => sanitize_text_field($request['phone_number']),
        'number_of_streams' => $request['number_of_streams'],
    ]);

    if (empty($data)) {
        return new WP_Error('no_update', 'No valid fields to update', ['status' => 400]);
    }

    $updated = $wpdb->update($table, $data, ['id' => $id]);

    if ($updated !== false) {
        return rest_ensure_response(['success' => true, 'updated_rows' => $updated]);
    }

    return new WP_Error('db_update_error', 'Failed to update data', ['status' => 500]);
}

/**
 * get_all_tributes (GET /tributestream/v1/tributes)
 * Returns paginated results from the tributes table.
 *
 * NOTE: This is where you need to check column names carefully:
 *  - "title" or "description" do NOT exist in your create_tribute code
 *  - "date" does not match "created_at" or "updated_at"
 */
function get_all_tributes($request) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'tributes';
    
    // Get pagination parameters
    $page = isset($request['page']) ? (int)$request['page'] : 1;
    $per_page = isset($request['per_page']) ? (int)$request['per_page'] : 10;
    $offset = ($page - 1) * $per_page;
    
    // Handle search
    $search = isset($request['search']) ? sanitize_text_field($request['search']) : '';
    
    // -----------------------------------------------------------
    // NOTE: "title" and "description" do NOT exist in your table.
    // You probably want to search "loved_one_name", "slug", or "custom_html".
    // -----------------------------------------------------------
    $where_clause = '';
    if (!empty($search)) {
        // Example fix:
        // $where_clause = $wpdb->prepare(
        //     "WHERE loved_one_name LIKE %s OR custom_html LIKE %s",
        //     '%' . $wpdb->esc_like($search) . '%',
        //     '%' . $wpdb->esc_like($search) . '%'
        // );
        
        // But in your code, it's:
        $where_clause = $wpdb->prepare("WHERE title LIKE %s OR description LIKE %s", 
            '%' . $wpdb->esc_like($search) . '%',
            '%' . $wpdb->esc_like($search) . '%'
        );
    }
    
    // Get total count for pagination
    $total_items = $wpdb->get_var("SELECT COUNT(*) FROM $table_name $where_clause");
    $total_pages = ceil($total_items / $per_page);
    
    // -----------------------------------------------------------
    // Another mismatch: You use "ORDER BY date DESC".
    // But your table likely has "created_at" or "updated_at" instead.
    // -----------------------------------------------------------
    $results = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name $where_clause ORDER BY date DESC LIMIT %d OFFSET %d",
            $per_page,
            $offset
        ),
        ARRAY_A
    );
    
    return rest_ensure_response([
        'tributes'     => $results ?: [],
        'total_pages'  => $total_pages
    ]);
}

/**
 * delete_tribute (DELETE /tributestream/v1/tributes/<id>)
 * Deletes a tribute by ID.
 */
function delete_tribute($request) {
    global $wpdb;
    $table = $wpdb->prefix . 'tributes';
    $id = $request['id'];

    $deleted = $wpdb->delete($table, ['id' => $id]);

    if ($deleted) {
        return rest_ensure_response(['success' => true, 'deleted_rows' => $deleted]);
    }

    return new WP_Error('db_delete_error', 'Failed to delete data', ['status' => 500]);
}
